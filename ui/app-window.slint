import { Button } from "std-widgets.slint";

component GridCell inherits Rectangle {
    in property <string> label;
    in property <bool> highlighted;

    area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.clicked();
        }
    }

    border-width: 1px;
    border-color: #888;
    visible: {
        if label == "#" {
            return false;
        }
        return true;
    }
    background: {
        if highlighted {
            return #44ff44;
        } else if label == "K" {
            return #fff;
        } else if label == "k" {
            return #444;
        } else {
            return #e0e0e0;
        }
    }
    Image {
        source: {
            if label == "K" {
                return @image-url("../assets/Chess_klt45.svg");
            } else if label == "k" {
                return @image-url("../assets/Chess_kdt45.svg");
            } else if label == "Q" {
                return @image-url("../assets/Chess_qlt45.svg");
            } else if label == "q" {
                return @image-url("../assets/Chess_qdt45.svg");
            } else if label == "R" {
                return @image-url("../assets/Chess_rlt45.svg");
            } else if label == "r" {
                return @image-url("../assets/Chess_rdt45.svg");
            } else if label == "B" {
                return @image-url("../assets/Chess_blt45.svg");
            } else if label == "b" {
                return @image-url("../assets/Chess_bdt45.svg");
            } else if label == "N" {
                return @image-url("../assets/Chess_nlt45.svg");
            } else if label == "n" {
                return @image-url("../assets/Chess_ndt45.svg");
            } else if label == "P" {
                return @image-url("../assets/Chess_plt45.svg");
            } else if label == "p" {
                return @image-url("../assets/Chess_pdt45.svg");
            }
            return @image-url("../assets/null.svg");
        }
    }
    
    callback clicked();
}

export component AppWindow inherits Window {
    width: 600px;
    height: 700px;
    title: "殘局產生器";

    in property <[string]> board; // 8x8 棋盤文字陣列（每格一字）
    callback generate();

    callback piece_clicked(index: int);
    in property <[bool]> highlights;

    for tile[i] in board : GridCell {
        x: mod(i, 8)*74px;
        y: floor(i/8)*74px;
        width: 64px;
        height: 64px;
        label: tile;
        highlighted: highlights[i];
        clicked => {
            root.piece_clicked(i);
        }
    }
    Button {
        y: 600px;
        text: "生成隨機殘局";
        clicked => { root.generate(); }
    }
}